# Spring Boot 应用配置文件
spring:
  application:
    name: online-programming-platform
  
  profiles:
    active: dev
  
  # 数据源配置
  datasource:
    # MySQL 主数据库
    primary:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/programming_platform?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
      username: root
      password: 8888
      hikari:
        pool-name: PrimaryHikariPool
        maximum-pool-size: 20
        minimum-idle: 5
        idle-timeout: 300000
        connection-timeout: 20000
        max-lifetime: 1200000
        leak-detection-threshold: 60000
    
    # PostgreSQL 辅助数据库
    secondary:
      driver-class-name: org.postgresql.Driver
      url: jdbc:postgresql://localhost:5432/programming_platform_analytics
      username: root
      password: 8888
      hikari:
        pool-name: SecondaryHikariPool
        maximum-pool-size: 15
        minimum-idle: 3
        idle-timeout: 300000
        connection-timeout: 20000
        max-lifetime: 1200000

  # MongoDB 配置
  data:
    mongodb:
      host: localhost
      port: 27017
      database: programming_platform_docs
      username: app_user
      password: 8888
      authentication-database: programming_platform_docs

  # Redis 配置
  data:
    redis:
      host: localhost
      port: 6379
      password: 8888
      database: 0
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 5000ms

  # Jackson 配置
  jackson:
    time-zone: Asia/Shanghai
    date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

  # 文件上传配置
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 50MB

  # 缓存配置
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1小时

# MyBatis 配置
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.programmingplatform.entity
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: true
    lazy-loading-enabled: true
    aggressive-lazy-loading: false
    multiple-result-sets-enabled: true
    use-column-label: true
    use-generated-keys: true
    auto-mapping-behavior: partial
    default-executor-type: reuse
    default-statement-timeout: 25000

# 服务器配置
server:
  port: 8080
  servlet:
    context-path: /api
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript
  error:
    include-stacktrace: never
    include-message: always

# 日志配置
logging:
  level:
    com.programmingplatform: DEBUG
    org.springframework.security: DEBUG
    org.mybatis: DEBUG
    org.springframework.data.mongodb: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/application.log
    max-size: 100MB
    max-history: 30

# 应用自定义配置
app:
  # JWT 配置
  jwt:
    secret: mySecretKey123456789012345678901234567890
    expiration: 86400000 # 24小时
    refresh-expiration: 604800000 # 7天
    header: Authorization
    prefix: "Bearer "
  
  # 代码执行配置
  code-execution:
    timeout: 30 # 秒
    memory-limit: 128 # MB
    docker:
      java-image: java-executor:latest
      python-image: python-executor:latest
      nodejs-image: nodejs-executor:latest
      network: platform_network
  
  # 文件存储配置
  file-storage:
    type: local # local, oss, s3
    local:
      base-path: /app/uploads
      max-size: 10MB
  
  # 缓存配置
  cache:
    user-cache-ttl: 3600 # 1小时
    course-cache-ttl: 1800 # 30分钟
    code-template-cache-ttl: 7200 # 2小时

# Actuator 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# API 文档配置
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  info:
    title: Online Programming Platform API
    description: A comprehensive online programming learning platform
    version: 1.0.0
    contact:
      name: Development Team
      email: dev@programmingplatform.com

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev
  
  # 开发环境数据源保持默认配置
  
logging:
  level:
    root: INFO
    com.programmingplatform: DEBUG

---
# Docker 环境配置
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    primary:
      url: jdbc:mysql://mysql:3306/programming_platform?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    secondary:
      url: jdbc:postgresql://postgresql:5432/programming_platform_analytics
  
  data:
    mongodb:
      host: mongodb
    redis:
      host: redis

logging:
  level:
    root: INFO
    com.programmingplatform: INFO

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod
  
  datasource:
    primary:
      hikari:
        maximum-pool-size: 50
        minimum-idle: 10
    secondary:
      hikari:
        maximum-pool-size: 30
        minimum-idle: 5

logging:
  level:
    root: WARN
    com.programmingplatform: INFO
  file:
    name: /app/logs/application.log
